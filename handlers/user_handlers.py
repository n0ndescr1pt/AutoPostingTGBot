from aiocryptopay import AioCryptoPay
from aiogram import types, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import FSInputFile

from data.config import Admin, CRYPTO_PAY_TOKEN, NETWORK
from keyboards.admin_kb import get_admin_kb, get_admin_choose_kb
from keyboards.user_kb import get_addBalance_kb, get_back_kb, get_user_kb, get_photo_kb, get_userChoose_kb, \
    get_profile_kb
from states.state import PostState
from utils.database import addNewUser, getBalance, getPrice, payForPost, orderPosts, addData, checkMyPost, \
    select_payment, update_balance, delete_payment
from utils.someMethods import cancel


#start command
async def start(message: types.Message):
    await addNewUser(message.from_user.id)
   # try:
    if(message.from_user.id == Admin):
        photo = FSInputFile("assets/moderation.png")
        await message.reply_photo(photo=photo,caption=f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é", reply_markup=get_admin_kb(),parse_mode=ParseMode.HTML)


    else:
        await message.reply(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é", reply_markup=get_user_kb())
    #except Exception:
    #    print("–ß—Ç–æ —Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å –ª–∏–±–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")


#handle create post
async def setContent(message: types.Message, state:FSMContext):
        photo = FSInputFile("assets/autoposting.png")
        await message.answer_photo(photo=photo,caption=f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞",reply_markup=get_back_kb())
        await state.set_state(PostState.text)


#add text to post
async def setText(message: types.Message, state:FSMContext):
    if(message.text == "–û—Ç–º–µ–Ω–∞"):
        await cancel(message, state)

    else:
        await state.update_data(text=message.md_text)
        await message.answer(text=f"–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É?",reply_markup=get_photo_kb())
        await state.set_state(PostState.addImg)

#add img to post?
async def addImg(message: types.Message, state:FSMContext):
    if (message.text == "–û—Ç–º–µ–Ω–∞"):
        await cancel(message, state)

    elif (message.text == "–î–∞"):
        await message.answer(text=f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É")
        await state.set_state(PostState.image)
    else:
        await state.update_data(photo="")

        #user_data = await state.get_data()
        #postText = user_data['text']

        await message.answer(text="–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –ø–æ—Å—Ç–∞",reply_markup=get_back_kb())
        #await message.answer(text=postText, reply_markup=get_back_kb())
        await state.set_state(PostState.setCount)


#add img to post

async def setImg(message: types.Message, state:FSMContext):
    if (message.text == "–û—Ç–º–µ–Ω–∞"):
        await cancel(message, state)

    else:
        await state.update_data(photo=message.photo[-1].file_id)

        #user_data = await state.get_data()
        #postText = user_data['text']
        #postImg = user_data['photo']

        await message.answer(text="–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–π –ø–æ—Å—Ç–∞",reply_markup=get_back_kb())
        #await message.answer_photo(photo=postImg, caption=postText,reply_markup=get_back_kb())

        await state.set_state(PostState.setCount)


async def setCounts(message: types.Message, state:FSMContext):
    if (message.text == "–û—Ç–º–µ–Ω–∞"):
        await cancel(message, state)

    else:
        try:
            float(message.text)
            await state.update_data(count=message.text)

            user_data = await state.get_data()
            postText = user_data['text']
            postImg = user_data['photo']
            count = user_data['count']
            if(int(count)>=2 and int(count)<=4):
                await message.answer(text=f"–í–∞—à –ø–æ—Å—Ç –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫ –∏ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω {message.text} —Ä–∞–∑–∞, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?")
            else:
                await message.answer(text=f"–í–∞—à –ø–æ—Å—Ç –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫ –∏ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω {message.text} —Ä–∞–∑, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?")
            if (postImg == ""):
                await message.answer(text=postText, disable_web_page_preview=True, reply_markup=get_userChoose_kb())
            else:
                await message.answer_photo(photo=postImg, caption=postText,reply_markup=get_userChoose_kb())
            price = await getPrice()
            await message.answer(text=f"–° –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –±—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω–æ {price * float(count)} $", disable_web_page_preview=True, parse_mode=ParseMode.HTML)
            await state.set_state(PostState.refactor)
        except ValueError:
            await message.answer(
                '<b>–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ</b>', parse_mode=ParseMode.HTML
            )


#send post to admins

async def refactoring(message: types.Message, state:FSMContext):
    user_data = await state.get_data()
    postText = user_data['text']
    postImg = user_data['photo']
    count = user_data['count']

    balance = await getBalance(message.from_user.id)
    price = await getPrice()
    if (message.text == "–û—Ç–º–µ–Ω–∞"):
        await cancel(message, state)
    elif(balance < price * float(count)):
        await message.answer(
            text=f"–ù–∞ –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.\n–¶–µ–Ω–∞ –∑–∞ –æ–¥–∏–Ω –ø–æ—Å—Ç = {price} $\n–≤–∞—à –±–∞–ª–∞–Ω—Å = {balance} $",
            reply_markup=get_addBalance_kb(), parse_mode=ParseMode.HTML)
        await cancel(message, state)
    else:
        await payForPost(message.from_user.id)
        order = await orderPosts()

        await message.answer(text=f"–ü–æ—Å—Ç–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏ {order}, –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –æ—Å—Ç–∞–ª–æ—Å—å {balance} $",parse_mode=ParseMode.HTML)

        if (postImg == ""):
            msg = await message.bot.send_message(chat_id=Admin, text=postText, reply_markup=get_admin_choose_kb(message.from_user.id), disable_web_page_preview=True)
        else:
            msg = await message.bot.send_photo(chat_id=Admin, photo=postImg, caption=postText, reply_markup=get_admin_choose_kb(message.from_user.id))
        addData(msg.message_id,postText,postImg,message.from_user.id,count)

        await message.answer(text=f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é", reply_markup=get_user_kb())

        await state.clear()

async def profile(message: types.Message):
    photo = FSInputFile("assets/profile.png")
    await message.answer_photo(photo=photo,reply_markup=get_profile_kb())


async def myMessage(callback: types.CallbackQuery):
    posts = await checkMyPost(callback.from_user.id)
    await callback.message.answer("–í–∞—à–∏ –ø–æ—Å—Ç—ã –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É")
    for row in posts:
        if (row[1] == ""):
                await callback.message.answer(text=row[0], disable_web_page_preview=True)
        else:
                await callback.message.answer_photo(photo=row[1], caption=row[0],)



async def backProfile(callback: types.CallbackQuery):
    await callback.message.delete()
    photo = FSInputFile("assets/profile.png")
    await callback.message.answer_photo(photo=photo ,reply_markup=get_profile_kb())



async def rules(message: types.Message):
    photo = FSInputFile("assets/rules.jpg")

    await message.answer_photo(photo=photo, caption=f"üö´ Political discussions\n"
                                                    f"üö´ Unauthorized advertising\n"
                                                    f"üö´ Scamming a chat member - BAN\n"
                                                    f"‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n"
                                                    f"üö´ –ü–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∏—Å–∫—É—Å—Å–∏–∏\n"
                                                    f"üö´ –ù–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞\n"
                                                    f"–°–∫–∞–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ —á–∞—Ç–∞  - –ë–ê–ù",
                                                    parse_mode=ParseMode.HTML)
def register_user_handlers(dp: Dispatcher):
    dp.message.register(start, CommandStart())
    dp.message.register(setContent, F.text.lower()=="–∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥", StateFilter(None))
    dp.message.register(setText, PostState.text)
    dp.message.register(addImg, PostState.addImg)
    dp.message.register(setImg, PostState.image, F.photo)
    dp.message.register(setCounts, PostState.setCount)
    dp.message.register(refactoring, PostState.refactor)
    dp.message.register(profile, F.text.lower() == "–ø—Ä–æ—Ñ–∏–ª—å")
    dp.callback_query.register(myMessage, F.data == "myMessage")
    dp.callback_query.register(backProfile, F.data == "backProfile")
    dp.message.register(rules, F.text.lower() == "–ø—Ä–∞–≤–∏–ª–∞")